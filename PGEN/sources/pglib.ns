const TRUE := 1,
      OKE := 1,
      empty := '';

var   karar := kartab.index,
      karsize := kartab.size;




proc get_str()
(	const quote := '''';

	scan line
	for	var s := cursor-1;

		while break(quote) & lit(quote || quote) do od;
		if ~lit(quote)
		then	ermsg('newline not allowed in string', lnr);
			rtab(0)
		fi;
		if errcnt = 0
		then	s := cursor-s; sy := move(-s);  move(s)
		else	sy := ''
		fi
	rof
);


proc get_number()
assert  scan line
	for   [sy, t_sy] := [sy || (span(digit) | empty), predef['simple_integer']] &
	      if try sy := sy || lit('.') || span(digit) yrt
	      then	t_sy := predef['simple_real']
	      fi &
	      if sy := sy || lit('e') ||
				    (lit('+') | lit('-') | '') || span(digit)
	      then t_sy := predef['simple_real']
	      fi
	rof;

proc nextsym()
(
	var i;

	while TRUE do
		line.span(' \t')|OKE;


		if sy := line.any(upper || lower)
                then    (sy := sy||line.span(lower||upper||digit||'_'))|OKE;
			t_sy := if keytab[sy] ~= undefined
				then keytab[sy];
				else predef['ident']
				fi;

			return;
		fi;

		for i in interval(karsize - 1, 0, -1)
		do
			sy := karar[i];
			if line.lit(sy) succeeds
			then
				t_sy := kartab[sy];
				return;
			fi;
		od;

		if line.lit('''')
		then
			get_str();
			t_sy := predef['string_const'];
			return;
		elif sy := line.any(digit)
		then
			get_number;
			return;
		elif line.rpos(0)
		then
			line := scan_string(get()) & lnr := lnr + 1 |
			( sy:='EOF' & t_sy := predef['EOF'] & return;)
		else
			sy := line.move(1);
			ermsg('illegal character: ' || sy,lnr);
		fi;
	od;
);


